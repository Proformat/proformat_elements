<?php

namespace ProformatCustomElements;

use function Breakdance\Elements\c;
use function Breakdance\Elements\PresetSections\getPresetSection;


\Breakdance\ElementStudio\registerElementForEditing(
    "ProformatCustomElements\\PostTable",
    \Breakdance\Util\getdirectoryPathRelativeToPluginFolder(__DIR__)
);

class PostTable extends \Breakdance\Elements\Element
{
    static function uiIcon()
    {
        return 'SquareIcon';
    }

    static function tag()
    {
        return 'div';
    }

    static function tagOptions()
    {
        return [];
    }

    static function tagControlPath()
    {
        return false;
    }

    static function name()
    {
        return 'Post Table';
    }

    static function className()
    {
        return 'autogenerated-pce-posttable';
    }

    static function category()
    {
        return 'other';
    }

    static function badge()
    {
        return false;
    }

    static function slug()
    {
        return get_class();
    }

    static function template()
    {
        return file_get_contents(__DIR__ . '/html.twig');
    }

    static function defaultCss()
    {
        return file_get_contents(__DIR__ . '/default.css');
    }

    static function defaultProperties()
    {
        return false;
    }

    static function defaultChildren()
    {
        return false;
    }

    static function cssTemplate()
    {
        $template = file_get_contents(__DIR__ . '/css.twig');
        return $template;
    }

    static function designControls()
    {
        return [c(
        "typography",
        "Typography",
        [getPresetSection(
      "EssentialElements\\typography_with_hoverable_color",
      "Text",
      "text",
       ['type' => 'popout']
     )],
        ['type' => 'section'],
        false,
        false,
        [],
      ), c(
        "form_elements",
        "Form elements",
        [getPresetSection(
      "EssentialElements\\combined_design",
      "Pagintation buttons",
      "pagintation_buttons",
       ['type' => 'popout']
     )],
        ['type' => 'section'],
        false,
        false,
        [],
      ), c(
        "table",
        "Table",
        [c(
        "width",
        "Width",
        [],
        ['type' => 'unit', 'layout' => 'inline'],
        false,
        false,
        [],
      ), getPresetSection(
      "EssentialElements\\borders",
      "Borders",
      "borders",
       ['type' => 'popout']
     ), getPresetSection(
      "EssentialElements\\spacing_padding_all",
      "Table padding",
      "table_padding",
       ['type' => 'popout']
     ), c(
        "space_between",
        "Space between",
        [],
        ['type' => 'unit', 'layout' => 'inline'],
        false,
        false,
        [],
      )],
        ['type' => 'section'],
        false,
        false,
        [],
      ), c(
        "table_head",
        "Table head",
        [getPresetSection(
      "EssentialElements\\background",
      "Background",
      "background",
       ['type' => 'popout']
     ), getPresetSection(
      "EssentialElements\\typography",
      "Typography",
      "typography",
       ['type' => 'popout']
     )],
        ['type' => 'section'],
        false,
        false,
        [],
      ), c(
        "table_row",
        "Table row",
        [c(
        "odd_background",
        "Odd background",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        true,
        [],
      ), c(
        "even_background",
        "Even background",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        true,
        [],
      ), getPresetSection(
      "EssentialElements\\typography_with_hoverable_color",
      "Typography",
      "typography",
       ['type' => 'popout']
     ), getPresetSection(
      "EssentialElements\\spacing_padding_y",
      "Row padding",
      "row_padding",
       ['type' => 'popout']
     )],
        ['type' => 'section'],
        false,
        false,
        [],
      ), c(
        "paginate_buttons",
        "Paginate buttons",
        [c(
        "background",
        "Background",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        true,
        [],
      ), getPresetSection(
      "EssentialElements\\typography_with_nothing",
      "Typography",
      "typography",
       ['type' => 'popout']
     ), c(
        "color",
        "Color",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        true,
        [],
      ), getPresetSection(
      "EssentialElements\\borders",
      "Borders",
      "borders",
       ['type' => 'popout']
     )],
        ['type' => 'section'],
        false,
        false,
        [],
      )];
    }

    static function contentControls()
    {
        return [c(
        "post_table",
        "Post Table",
        [c(
        "post_type",
        "Post Type",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "posts_number",
        "Posts number",
        [],
        ['type' => 'number', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "table_columns",
        "Table columns",
        [c(
        "message",
        "Message",
        [],
        ['type' => 'alert_box', 'layout' => 'vertical', 'alertBoxOptions' => ['style' => 'default', 'content' => '<p>Post object properties: {ID}, {post_title}, {post_date}, {post_excerpt}<br>Metabox: mb:fieldname<br>ACF: acf:fieldname</p>']],
        false,
        false,
        [],
      ), c(
        "display",
        "Display",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "property",
        "Property",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "width",
        "Width",
        [],
        ['type' => 'unit', 'layout' => 'inline'],
        false,
        false,
        [],
      )],
        ['type' => 'repeater', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "show_id_column",
        "Show ID column",
        [],
        ['type' => 'toggle', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "show_actions",
        "Show actions",
        [],
        ['type' => 'toggle', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "action_buttons",
        "Action buttons",
        [],
        ['type' => 'multiselect', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'delete', 'text' => 'Delete'], '1' => ['text' => 'Edit', 'value' => 'edit'], '2' => ['text' => 'View', 'value' => 'view']], 'condition' => ['0' => ['0' => ['path' => 'content.post_table.show_actions', 'operand' => 'is set', 'value' => '']]]],
        false,
        false,
        [],
      )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "settings",
        "Settings",
        [c(
        "show_pagination",
        "Show pagination",
        [],
        ['type' => 'toggle', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "order_switch",
        "Order switch",
        [],
        ['type' => 'toggle', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "search",
        "Search",
        [],
        ['type' => 'toggle', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "info",
        "Info",
        [],
        ['type' => 'toggle', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "language",
        "Language",
        [],
        ['type' => 'dropdown', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'pl', 'text' => 'Polish'], '1' => ['text' => 'English', 'value' => 'en-GB'], '2' => ['text' => 'German', 'value' => 'de-DE'], '3' => ['text' => 'Spanish', 'value' => 'es-ES']]],
        false,
        false,
        [],
      )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      )];
    }

    static function settingsControls()
    {
        return [];
    }

    static function dependencies()
    {
        return ['0' =>  ['inlineScripts' => ['// https://datatables.net/examples/advanced_init/language_file
// https://datatables.net/plug-ins/i18n/

jQuery(document).ready(function($) {
  let paging = Boolean(\'{{ content.settings.show_pagination }}\');
  let ordering = Boolean(\'{{ content.settings.order_switch }}\');
  let info = Boolean(\'{{ content.settings.info }}\');
  let searching = Boolean(\'{{ content.settings.search }}\');
  console.log(\'dep\')
  var table = $(\'%%SELECTOR%% #myTable\').DataTable({
      paging,
      ordering,
      info,
      searching,
      "language":  {
            "url": datatablesajax[\'plugin_url\'] + "elements/Post_Table/lang/" + "{{ content.settings.language }}" + ".json"
        }
  });
        
});
'],],];
    }

    static function settings()
    {
        return false;
    }

    static function addPanelRules()
    {
        return false;
    }

    static public function actions()
    {
        return [

'onPropertyChange' => [['script' => '// https://datatables.net/examples/advanced_init/language_file
// https://datatables.net/plug-ins/i18n/

jQuery(document).ready(function($) {
  let paging = {{ content.settings.show_pagination }};
  let ordering = {{ content.settings.order_switch }};
  let info = {{ content.settings.info }};
  let searching = {{ content.settings.search }};
  table.destroy();
  table = $(\'%%SELECTOR%% #myTable\').DataTable({
      paging,
      ordering,
      info,
      searching,
      "language":  {
            "url": datatablesajax[\'plugin_url\'] + "elements/Post_Table/lang/" + "{{ content.settings.language }}" + ".json"
        }
  });
        
});
',
],],];
    }

    static function nestingRule()
    {
        return ["type" => "final",   ];
    }

    static function spacingBars()
    {
        return false;
    }

    static function attributes()
    {
        return false;
    }

    static function experimental()
    {
        return false;
    }

    static function order()
    {
        return 0;
    }

    static function dynamicPropertyPaths()
    {
        return ['0' => ['accepts' => 'image_url', 'path' => 'design.table_head.background.layers[].image'], '1' => ['accepts' => 'image_url', 'path' => 'design.table_row.odd_background.layers[].image'], '2' => ['accepts' => 'image_url', 'path' => 'design.table_row.even_background.layers[].image']];
    }

    static function additionalClasses()
    {
        return false;
    }

    static function projectManagement()
    {
        return false;
    }

    static function propertyPathsToWhitelistInFlatProps()
    {
        return ['design.form_elements.layout.horizontal.vertical_at', 'design.table_row.background.image', 'design.table_row.background.overlay.image', 'design.table_row.background.image_settings.unset_image_at', 'design.table_row.background.image_settings.size', 'design.table_row.background.image_settings.height', 'design.table_row.background.image_settings.repeat', 'design.table_row.background.image_settings.position', 'design.table_row.background.image_settings.left', 'design.table_row.background.image_settings.top', 'design.table_row.background.image_settings.attachment', 'design.table_row.background.image_settings.custom_position', 'design.table_row.background.image_settings.width', 'design.table_row.background.overlay.image_settings.custom_position', 'design.table_row.background.image_size', 'design.table_row.background.overlay.image_size', 'design.table_row.background.overlay.type', 'design.table_row.background.design.layout.horizontal.vertical_at', 'design.table_row.background.image_settings', 'design.table.layout.horizontal.vertical_at'];
    }

    static function propertyPathsToSsrElementWhenValueChanges()
    {
        return false;
    }
}

(function(r,i){typeof exports=="object"&&typeof module<"u"?module.exports=i():typeof define=="function"&&define.amd?define(i):(r=typeof globalThis<"u"?globalThis:r||self,r.EhWebglMediaHoverEffect=i())})(this,function(){"use strict";var g=Object.defineProperty;var p=(r,i,e)=>i in r?g(r,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[i]=e;var n=(r,i,e)=>(p(r,typeof i!="symbol"?i+"":i,e),e);class r{constructor(e){n(this,"loadDisplacementTexture",e=>{this.textureLoader.load(this.displacementImage,s=>{this.displacementTexture=s,this.setMinMagFilters(this.displacementTexture),e&&this.material&&(this.material.uniforms.disp.value=this.displacementTexture)})});n(this,"createTexture",(e,s,h,t)=>{e.type=="image"?this.textureLoader.load(e.url,a=>{e.texture=a,this.setMinMagFilters(e.texture),t&&(this.mediaSize.x=this.media1.texture.source.data.width,this.mediaSize.y=this.media1.texture.source.data.height,this.imagesRatio=this.mediaSize.y/this.mediaSize.x),h?(this.material&&this.material.uniforms.disp.value==null&&(this.material.uniforms.disp.value=this.displacementTexture),this.onResize(),this.createPlane(),this.render()):this.material&&(this.material.uniforms[s].value=e.texture)}):(this.hasVideo||(this.hasVideo=!0),this.loadVideo(e.url).then(a=>{e.texture=new THREE.VideoTexture(a),this.setMinMagFilters(e.texture),a.play(),t&&(this.mediaSize.x=this.media1.texture.source.data.videoWidth,this.mediaSize.y=this.media1.texture.source.data.videoHeight,this.imagesRatio=this.mediaSize.y/this.mediaSize.x),h?(this.material&&this.material.uniforms.disp.value==null&&(this.material.uniforms.disp.value=this.displacementTexture),this.onResize(),this.createPlane(),this.render()):this.material&&(this.material.uniforms[s].value=e.texture)}).catch(a=>console.log(a)))});n(this,"updateMaterial",()=>{this.material&&(this.material.uniforms.intensity1.value=this.intensity1,this.material.uniforms.intensity2.value=this.intensity2,this.material.uniforms.angle1.value=this.angle1,this.material.uniforms.angle2.value=this.angle2,this.material.uniforms.mediaSize.value.set(this.mediaSize.x,this.mediaSize.y),this.material.uniforms.res.value.set(this.mediaEl.offsetWidth,this.mediaEl.offsetHeight,this.sizes.a1,this.sizes.a2))});n(this,"setSizes",()=>{this.mediaEl.offsetHeight/this.mediaEl.offsetWidth<this.imagesRatio?(this.sizes.a1=1,this.sizes.a2=this.mediaEl.offsetHeight/this.mediaEl.offsetWidth/this.imagesRatio):(this.sizes.a1=this.mediaEl.offsetWidth/this.mediaEl.offsetHeight*this.imagesRatio,this.sizes.a2=1)});n(this,"render",()=>{this.hasVideo&&requestAnimationFrame(this.render.bind(this)),this.renderer.render(this.scene,this.camera)});n(this,"onResize",()=>{this.setSizes(),this.material&&(this.material.uniforms.res.value=new THREE.Vector4(this.mediaEl.offsetWidth,this.mediaEl.offsetHeight,this.sizes.a1,this.sizes.a2)),this.canvas.style.width=this.mediaEl.offsetWidth,this.canvas.style.height=this.mediaEl.offsetHeight,this.renderer.setSize(this.mediaEl.offsetWidth,this.mediaEl.offsetHeight),this.hasVideo||this.render()});n(this,"destroy",()=>{var e,s,h,t,a;(e=this.media1.texture)==null||e.dispose(),(s=this.media2.texture)==null||s.dispose(),(h=this.displacementTexture)==null||h.dispose(),(t=this.material)==null||t.dispose(),(a=this.renderer)==null||a.dispose(),this.renderer=null});var s,h,t,a,d,l,o,m,u,f,c,v;this.parent=e.parent,this.canvas=e.canvas,this.mediaEl=e.mediaEl,this.displacementImage=e.displacementImage,this.media1=e.media1,this.media2=e.media2,this.mediaFit=e.mediaFit,this.imagesRatio=0,this.intensity1=(h=(s=e.intensity1)!=null?s:e.intensity)!=null?h:1,this.intensity2=(a=(t=e.intensity2)!=null?t:e.intensity)!=null?a:1,this.commonAngle=(d=e.angle)!=null?d:Math.PI/4,this.angle1=(l=e.angle1)!=null?l:this.commonAngle,this.angle2=(o=e.angle2)!=null?o:-this.commonAngle*3,this.speedIn=(m=e.speedIn)!=null?m:e.speed,this.speedOut=(u=e.speedOut)!=null?u:e.speed,this.useHover=(f=e.hover)!=null?f:!0,this.easing=(c=e.easing)!=null?c:Expo.easeOut,this.hasVideo=(v=e.hasVideo)!=null?v:!1,this.displacementTexture=null,this.sizes={a1:0,a2:0},this.mediaSize={x:0,y:0},this.isTouchDevice="ontouchstart"in window,this.isAnimated=!1,this.textureLoader=new THREE.TextureLoader,this.init()}init(){this.createScene(),this.createCamera(),this.createRenderer(),this.createShaders(),this.loadDisplacementTexture(!0),this.createTexture(this.media1,"texture1",!0,!0),this.createTexture(this.media2,"texture2"),this.initEvents()}createScene(){this.scene=new THREE.Scene}createCamera(){this.camera=new THREE.OrthographicCamera(this.mediaEl.offsetWidth/-2,this.mediaEl.offsetWidth/2,this.mediaEl.offsetHeight/2,this.mediaEl.offsetHeight/-2,1,1e3),this.camera.position.z=1}createRenderer(){this.renderer=new THREE.WebGLRenderer({canvas:this.canvas,antialias:!0,alpha:!0}),this.canvas.style.width=this.mediaEl.offsetWidth,this.canvas.style.height=this.mediaEl.offsetHeight,this.renderer.setPixelRatio(Math.max(window.devicePixelRatio,2)),this.renderer.setClearColor(16777215,0),this.renderer.setSize(this.mediaEl.offsetWidth,this.mediaEl.offsetHeight)}setMinMagFilters(e){e.magFilter=e.minFilter=THREE.LinearFilter}loadVideo(e){return new Promise((s,h)=>{const t=document.createElement("video");t.setAttribute("muted",!0),t.setAttribute("autoplay",!0),t.setAttribute("playsinline",!0),t.setAttribute("loop",!0),t.muted=!0,t.crossOrigin="Anonymous",t.src=e,t.load(),t.addEventListener("canplaythrough",()=>{s(t)}),t.addEventListener("error",()=>{h(`unable to load video ${e}`)})})}createShaders(){this.vertex=`
            varying vec2 vUv;
            void main() {
                vUv = uv;
                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
            }
        `,this.fragment=`
            varying vec2 vUv;

            uniform float dispFactor;
            uniform float dpr;
            uniform sampler2D disp;

            uniform sampler2D texture1;
            uniform sampler2D texture2;
            uniform float angle1;
            uniform float angle2;
            uniform float intensity1;
            uniform float intensity2;
            uniform vec4 res;
            uniform vec2 parent;
			uniform vec2 mediaSize;

            mat2 getRotM(float angle) {
                float s = sin(angle);
                float c = cos(angle);
                return mat2(c, -s, s, c);
            }

			// from https://gist.github.com/mattdesl/6024dfb256406e7d325dd9d4c6e64c13
			vec2 backgroundUV (vec2 uv, vec2 resolution, vec2 texResolution) {
				float tAspect = texResolution.x / texResolution.y;
				float pAspect = resolution.x / resolution.y;
				float pwidth = resolution.x;
				float pheight = resolution.y;

				float width = 0.0;
				float height = 0.0;
				if (tAspect > pAspect) {
				  height = pheight;
				  width = height * tAspect;
				} else {
				  width = pwidth;
				  height = width / tAspect;
				}
				float x = (pwidth - width) / 2.0;
				float y = (pheight - height) / 2.0;
				vec2 nUv = uv;
				nUv -= vec2(x, y) / resolution;
				nUv /= vec2(width, height) / resolution;
				return nUv;
			  }

            void main() {

                vec4 disp = texture2D(disp, vUv);
                vec2 dispVec = vec2(disp.r, disp.g);

				vec2 myUV = vec2(0.);


				//	vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy);
				//	myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);
					myUV = backgroundUV(vUv, res.xy, mediaSize);


                vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;
                vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);
                vec4 _texture1 = texture2D(texture1, distortedPosition1);
                vec4 _texture2 = texture2D(texture2, distortedPosition2);
                gl_FragColor = mix(_texture1, _texture2, dispFactor);
            }
        `}createPlane(){this.material=new THREE.ShaderMaterial({uniforms:{intensity1:{value:this.intensity1},intensity2:{value:this.intensity2},dispFactor:{value:0},angle1:{value:this.angle1},angle2:{value:this.angle2},texture1:{value:this.media1.texture},texture2:{value:this.media2.texture},disp:{value:this.displacementTexture},mediaSize:{value:new THREE.Vector2(this.mediaSize.x,this.mediaSize.y)},res:{value:new THREE.Vector4(this.mediaEl.offsetWidth,this.mediaEl.offsetHeight,this.sizes.a1,this.sizes.a2)},dpr:{value:Math.min(window.devicePixelRatio,2)}},vertexShader:this.vertex,fragmentShader:this.fragment,transparent:!0,opacity:1}),this.geometry=new THREE.PlaneGeometry(this.mediaEl.offsetWidth,this.mediaEl.offsetHeight,1),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane)}transitionIn(){if(this.isTouchDevice&&this.isAnimated){this.transitionOut(),this.isAnimated=!1;return}gsap.to(this.material.uniforms.dispFactor,this.speedIn,{value:1,ease:this.easing,onUpdate:()=>{this.hasVideo||this.render()},onComplete:()=>{this.hasVideo||this.render(),this.isTouchDevice&&(this.isAnimated=!0)}})}transitionOut(){gsap.to(this.material.uniforms.dispFactor,this.speedOut,{value:0,ease:this.easing,onUpdate:()=>{this.hasVideo||this.render()},onComplete:()=>{this.hasVideo||this.render()}})}initEvents(){this.useHover&&this.isTouchDevice?this.parent.addEventListener("touchstart",this.transitionIn.bind(this),{passive:!0}):(this.parent.addEventListener("mouseenter",this.transitionIn.bind(this)),this.parent.addEventListener("mouseleave",this.transitionOut.bind(this))),window.addEventListener("resize",this.onResize.bind(this))}}return r});
